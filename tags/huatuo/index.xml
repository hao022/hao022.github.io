<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HUATUO on HUATUO 开源技术</title>
    <link>https://huatuo.tech/tags/huatuo/</link>
    <description>Recent content in HUATUO on HUATUO 开源技术</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Oct 2025 01:58:56 +0000</lastBuildDate>
    <atom:link href="https://huatuo.tech/tags/huatuo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HUATUO（华佗）荣获《OSCAR 尖峰开源项目及开源社区》称号</title>
      <link>https://huatuo.tech/blog/2025-10-28-huatuo-oscar-event/</link>
      <pubDate>Sun, 26 Oct 2025 10:19:02 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-10-28-huatuo-oscar-event/</guid>
      <description>&lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO（华佗）&lt;/a&gt; 凭借其在技术创新、社区建设等方面的卓越表现，荣获中国信息通信研究院、中国通信标准化协会颁发的《OSCAR 尖峰开源项目及开源社区》 奖项 &amp;hellip;</description>
    </item>
    <item>
      <title>应用篇：如何使用 HUATUO 解决网卡硬件丢包</title>
      <link>https://huatuo.tech/blog/2025-09-30-how-to-use-huatuo-to-solve-packets-loss/</link>
      <pubDate>Tue, 30 Sep 2025 04:33:21 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-09-30-how-to-use-huatuo-to-solve-packets-loss/</guid>
      <description>本文探讨了检测网卡硬件丢包遇到的问题，例如 ethtool 为什么不能应用于常态的硬件丢包检测，并最终给出了 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 网卡硬件丢包检测解决方案，并提供了一个实际生产环境故障案例 &amp;hellip;</description>
    </item>
    <item>
      <title>思考篇：关于双上联去堆叠网络架构的一点总结</title>
      <link>https://huatuo.tech/blog/2025-09-26-some-thoughts-on-non-stacking-network-architecture/</link>
      <pubDate>Fri, 26 Sep 2025 03:20:47 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-09-26-some-thoughts-on-non-stacking-network-architecture/</guid>
      <description>本文探讨了双上联去堆叠网络架构的设计思路与生产环境中遇到的实际问题（如LACP协议状态与物理链路的监控难点），并引入 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 解决方案，以实现对物理链路可用性的有效观测 &amp;hellip;</description>
    </item>
    <item>
      <title>思考篇：如何构建一个稳健的系统</title>
      <link>https://huatuo.tech/blog/2025-09-24-how-to-build-a-robust-system/</link>
      <pubDate>Tue, 23 Sep 2025 22:13:21 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-09-24-how-to-build-a-robust-system/</guid>
      <description>该文章介绍了在实际生产过程中，对设计稳健系统的一些思考，形成一些方法论。对基础软件，业务软件，集群软件都有适用性。希望&lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 能够为大家在设计稳健系统时提供一些帮助 &amp;hellip;</description>
    </item>
    <item>
      <title>应用篇：如何使用 HUATUO 解决应用程序卡住问题</title>
      <link>https://huatuo.tech/blog/2025-09-22-how-to-use-huatuo-to-solve-the-problem-of-application-stalling/</link>
      <pubDate>Mon, 22 Sep 2025 10:53:25 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-09-22-how-to-use-huatuo-to-solve-the-problem-of-application-stalling/</guid>
      <description>该文章介绍了在实际生产环境中哪些因素可能导致进程“卡顿”，以及 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 如何观测这些卡顿行为，并附有实际指标看板。最后通过实际的一个案例说明如何定位到卡顿原因，和实际效果 &amp;hellip;</description>
    </item>
    <item>
      <title>应用篇：深入剖析网络收包延迟，从网卡到应用的精确追踪与优化</title>
      <link>https://huatuo.tech/blog/2025-09-15-netrecvlat-article/</link>
      <pubDate>Mon, 15 Sep 2025 07:00:00 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-09-15-netrecvlat-article/</guid>
      <description>该文章主要介绍了 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 网络收方向延迟检测方案。论证了获取时间戳的位置，以及到用户态的接收延迟的检测。最后给出了在生产实践过程中具体问题案例 &amp;hellip;</description>
    </item>
    <item>
      <title>合作篇：打通操作系统可观测性最后一公里</title>
      <link>https://huatuo.tech/blog/2025-08-27-huatuo-and-nightingale-work-together/</link>
      <pubDate>Wed, 27 Aug 2025 01:08:32 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-08-27-huatuo-and-nightingale-work-together/</guid>
      <description>即刻部署 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; + &lt;a href=&#34;https://n9e.github.io/zh/&#34;&gt;夜莺监控&lt;/a&gt; 工具组合，快速构建覆盖应用，中间件，数据库，操作系统内核的一体化可观测体系。HUATUO 开箱即用，从各维度全面观测内核，填补了操作系统可观测性领域的空白。</description>
    </item>
    <item>
      <title>应用篇：如何使用 HUATUO 解决容器 CPUIdle 掉底问题</title>
      <link>https://huatuo.tech/blog/2025-08-19-how-to-use-huatuo-solve-problem-of-container-cpuidle/</link>
      <pubDate>Thu, 21 Aug 2025 10:14:29 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-08-19-how-to-use-huatuo-solve-problem-of-container-cpuidle/</guid>
      <description>系统故障诊断面临多重挑战。如何在新技术范式与架构下，构建面向操作系统的低损耗、零侵扰、全景式、持续深度观测能力体系，成为亟待解决的核心问题。本系列文章分享 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 落地实践 &amp;hellip;</description>
    </item>
    <item>
      <title>滴滴操作系统可观测项目 HUATUO 正式入驻 CCF</title>
      <link>https://huatuo.tech/blog/2025-08-07-huatuo-open-source-project-has-entered-the-ccf-incubation-phase/</link>
      <pubDate>Fri, 08 Aug 2025 03:19:58 -0400</pubDate>
      <guid>https://huatuo.tech/blog/2025-08-07-huatuo-open-source-project-has-entered-the-ccf-incubation-phase/</guid>
      <description>8月2日，&lt;a href=&#34;https://www.didiglobal.com/&#34;&gt;滴滴&lt;/a&gt;宣布其开源云原生操作系统可观测性项目 &lt;a href=&#34;https://huatuo.tech/&#34;&gt;HUATUO&lt;/a&gt; 正式入驻&lt;a href=&#34;https://www.ccf.org.cn/&#34;&gt;中国计算机学会（CCF）&lt;/a&gt;，加入其重点孵化项目序列。本次入驻不仅体现了滴滴长期践行开源共建共享的理念，也希望通过行业协作，共同推动可观测领域操作系统基础设施的高效标准化发展。</description>
    </item>
    <item>
      <title>HAO022</title>
      <link>https://huatuo.tech/authors/hao022/</link>
      <pubDate>Wed, 11 Jun 2025 22:23:43 -0400</pubDate>
      <guid>https://huatuo.tech/authors/hao022/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;技术研究&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux 内核: &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/netdev/net-next.git/log/?qt=author&amp;amp;q=Tonghao+Zhang&#34;&gt;PR 列表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Open vSwitch: &lt;a href=&#34;https://github.com/openvswitch/ovs/commits?author=hao022&#34;&gt;PR 列表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;DPDK: &lt;a href=&#34;https://git.dpdk.org/dpdk/log/?qt=grep&amp;amp;q=Tonghao+Zhang&#34;&gt;PR 列表&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;RDMA&lt;/li&gt;&#xA;&lt;li&gt;K8S&lt;/li&gt;&#xA;&lt;li&gt;AI &amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ccfos/huatuo&#34;&gt;HUATUO（华佗）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;技术分享&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2019-01-09 滴滴技术微信公众号: &lt;a href=&#34;https://mp.weixin.qq.com/s/o2N392KrysWnnsRAr4dm1w&#34;&gt;使用 OVS-DPDK 加速滴滴云网络&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2020-08-23 滴滴技术微信公众号: &lt;a href=&#34;https://mp.weixin.qq.com/s/3kaom7LqC9G7AJqb0ffZdA&#34;&gt;可编程网卡芯片在滴滴云网络的应用实践&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2020-12-19 中国云网络峰会: &lt;a href=&#34;https://huatuo.tech/download/pdf/2020-%E4%B8%AD%E5%9B%BD%E4%BA%91%E7%BD%91%E7%BB%9C%E5%B3%B0%E4%BC%9A-%E8%BD%AF%E7%A1%AC%E4%BB%B6%E4%B8%80%E4%BD%93%E5%8C%96%E5%9C%A8%E6%BB%B4%E6%BB%B4%E4%BA%91%E7%BD%91%E7%BB%9C%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5.pdf&#34;&gt;软硬件一体化在滴滴云网络落地实践&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2023-06-11 开放原子全球开源峰会: &lt;a href=&#34;https://huatuo.tech/download/pdf/2023-%E5%BC%80%E6%BA%90%E5%B3%B0%E4%BC%9A-eBPF%E5%86%85%E6%A0%B8%E6%8A%80%E6%9C%AF%E5%9C%A8%E6%BB%B4%E6%BB%B4%E4%BA%91%E5%8E%9F%E7%94%9F%E7%9A%84%E8%90%BD%E5%9C%B0%E5%AE%9E%E8%B7%B5.pdf&#34;&gt;eBPF 内核技术在滴滴云原生的落地实践&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2024-07-26 第二届 CCF 夜莺开发者创新论坛: &lt;a href=&#34;https://huatuo.tech/download/pdf/2024-CCF-eBPF%E5%9C%A8%E5%86%85%E6%A0%B8%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%95%85%E9%9A%9C%E5%AE%9A%E4%BD%8D%E4%B8%AD%E7%9A%84%E5%AE%9E%E8%B7%B5.pdf&#34;&gt;eBPF 在内核可观测故障定位中的实践&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2025-03-31 北京大学 &amp;ldquo;企业开源系列课程&amp;rdquo;: &lt;a href=&#34;https://huatuo.tech/download/pdf/2025-%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%AD%A6-%E6%BB%B4%E6%BB%B4%E5%BC%80%E6%BA%90%E7%9A%84%E4%BD%93%E7%B3%BB%E5%8C%96%E5%BB%BA%E8%AE%BE%E5%92%8C%E6%9C%AA%E6%9D%A5%E6%88%98%E7%95%A5%E8%A7%84%E5%88%92-%E8%84%B1%E6%95%8F%E7%89%88.pdf&#34;&gt;滴滴开源的体系化建设和未来战略规划&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2025-07-04 第三届 CCF 夜莺开发者创新论坛: &lt;a href=&#34;https://huatuo.tech/download/pdf/2025-CCF-HUATUO-%E5%9F%BA%E4%BA%8EBPF%E7%9A%84%E5%8F%AF%E8%A7%82%E6%B5%8B%E8%83%BD%E5%8A%9B%E5%BB%BA%E8%AE%BE%E5%8F%8AGPU%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%80%A7%E8%83%BD%E5%89%96%E6%9E%90%E6%8E%A2%E7%B4%A2.pdf&#34;&gt;HUATUO 基于BPF的可观测能力建设及 GPU 大模型性能剖析探索&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2025-08-02 CCF 中国开源大会: &lt;a href=&#34;https://huatuo.tech/download/pdf/2025-CCF-%E5%8D%8E%E4%BD%97%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8D%90%E8%B5%A0%E4%BB%AA%E5%BC%8F.pdf&#34;&gt;务实创新，众行致远: HUATUO（华佗）项目依托 CCF 共建开源协同创新社区&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;2025-08-07 滴滴技术微信公众号: &lt;a href=&#34;https://mp.weixin.qq.com/s/aFKdCiXIHKFKBFdSf58buQ&#34;&gt;滴滴操作系统可观测性项目 HUATUO 正式入驻 CCF&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>事件指标</title>
      <link>https://huatuo.tech/docs/events/</link>
      <pubDate>Wed, 11 Jun 2025 22:23:43 -0400</pubDate>
      <guid>https://huatuo.tech/docs/events/</guid>
      <description>&lt;h3 id=&#34;总览&#34;&gt;总览&lt;/h3&gt;&#xA;&lt;p&gt;HUATUO 目前支持的异常上下文捕获事件如下：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;事件名称&lt;/th&gt;&#xA;          &lt;th&gt;核心功能&lt;/th&gt;&#xA;          &lt;th&gt;场景&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;softirq&lt;/td&gt;&#xA;          &lt;td&gt;宿主软中断延迟响应或长期关闭，输出长时间关闭软中断的内核调用栈，进程信息等&lt;/td&gt;&#xA;          &lt;td&gt;该类问题会严重影响网络收发，进而导致业务毛刺或者超时等其他问题&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;dropwatch&lt;/td&gt;&#xA;          &lt;td&gt;TCP 数据包丢包检测，输出发生丢包时主机、网络上下文信息等&lt;/td&gt;&#xA;          &lt;td&gt;该类问题主要会引起业务毛刺和延迟&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;netrecvlat&lt;/td&gt;&#xA;          &lt;td&gt;在网络收方向获取数据包从驱动、协议栈、到用户主动收过程的延迟事件&lt;/td&gt;&#xA;          &lt;td&gt;网络延迟问题中有一类是数据传输阶段收方向存在延迟，但不清楚是延迟位置，netrecvlat 根据 skb 入网卡时间戳依次在驱动、协议栈和用户拷贝数据等路径计算延迟，通过预先设定的阈值过滤超时的数据包，定位延迟位置&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;oom&lt;/td&gt;&#xA;          &lt;td&gt;检测宿主或容器内 oom 事件&lt;/td&gt;&#xA;          &lt;td&gt;当宿主机层面或者容器维度发生 oom 事件时，能够获取触发 oom 的进程信息、被 kill 的进程信息以及容器信息，便于定位进程内存泄漏、异常退出等问题&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;softlockup&lt;/td&gt;&#xA;          &lt;td&gt;当系统上发生 softlockup 时，收集目标进程信息以及 cpu 信息，同时获取各个 cpu 上的内核栈信息&lt;/td&gt;&#xA;          &lt;td&gt;系统发生 softlockup&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;hungtask&lt;/td&gt;&#xA;          &lt;td&gt;提供系统内所有 D 状态进程数量、内核栈信息&lt;/td&gt;&#xA;          &lt;td&gt;用于定位瞬时出现 D 进程的场景，能及时保留现场便于后期问题跟踪&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memreclaim&lt;/td&gt;&#xA;          &lt;td&gt;进程进入直接回收的耗时，超过时间阈值，记录进程信息&lt;/td&gt;&#xA;          &lt;td&gt;内存压力过大时，如果此时进程申请内存，有可能进入直接回收，此时处于同步回收阶段，可能会造成业务进程的卡顿，此时记录进程进入直接回收的时间，有助于我们判断此进程被直接回收影响的剧烈程度&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;netdev&lt;/td&gt;&#xA;          &lt;td&gt;检测网卡状态变化&lt;/td&gt;&#xA;          &lt;td&gt;网卡抖动、bond 环境下 slave 异常等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;lacp&lt;/td&gt;&#xA;          &lt;td&gt;检测 lacp 状态变化&lt;/td&gt;&#xA;          &lt;td&gt;bond 模式 4 下，监控 lacp 协商状态&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;软中断关闭过长检测&#34;&gt;软中断关闭过长检测&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;功能介绍&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Linux 内核存在进程上下文，中断上下文，软中断上下文，NMI 上下文等概念，这些上下文之间可能存在共享数据情况，因此为了确保数据的一致性，正确性，内核代码可能会关闭软中断或者硬中断。从理论角度，单次关闭中断或者软中断时间不能太长，但高频的系统调用，陷入内核态频繁执行关闭中断或软中断，同样会造&amp;quot;长时间关闭&amp;quot;的现象，拖慢了系统的响应。“关闭中断，软中断时间过长”这类问题非常隐蔽，且定位手段有限，同时影响又非常大，体现在业务应用上一般为接收数据超时。针对这种场景我们基于BPF技术构建了检测硬件中断，软件中断关闭过长的能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>追踪指标</title>
      <link>https://huatuo.tech/docs/autotracing/</link>
      <pubDate>Wed, 11 Jun 2025 22:23:43 -0400</pubDate>
      <guid>https://huatuo.tech/docs/autotracing/</guid>
      <description>&lt;h3 id=&#34;概述&#34;&gt;概述&lt;/h3&gt;&#xA;&lt;p&gt;HUATUO 已支持自动追踪指标如下：&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;追踪名称&lt;/th&gt;&#xA;          &lt;th&gt;核心功能&lt;/th&gt;&#xA;          &lt;th&gt;场景&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpusys&lt;/td&gt;&#xA;          &lt;td&gt;宿主 sys 突增检测&lt;/td&gt;&#xA;          &lt;td&gt;由于系统负载异常导致业务毛刺问题&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpuidle&lt;/td&gt;&#xA;          &lt;td&gt;容器 cpu idle 掉底检测，提供调用栈，火焰图，进程上下文信息等&lt;/td&gt;&#xA;          &lt;td&gt;容器 cpu 使用异常，帮助业务描绘进程热点&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;dload&lt;/td&gt;&#xA;          &lt;td&gt;跟踪容器loadavg状态进程状态，自动抓取容器 D 状态进程调用信息&lt;/td&gt;&#xA;          &lt;td&gt;系统 D 状态突增通常和资源不可用或者锁被长期持有相关，R 状态进程数量突增往往是业务代码设计不合理导致&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;waitrate&lt;/td&gt;&#xA;          &lt;td&gt;容器资源争抢检测，容器调度被争抢时提供正在争抢的容器信息&lt;/td&gt;&#xA;          &lt;td&gt;容器被争抢可能会引起业务毛刺，已存在争抢指标缺乏具体正在争抢的容器信息，通过 waitrate 追踪可以获取参与争抢的容器信息，给混部资源隔离提供参考&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memburst&lt;/td&gt;&#xA;          &lt;td&gt;记录内存突发分配时上下文信息&lt;/td&gt;&#xA;          &lt;td&gt;宿主机短时间内大量分配内存，检测宿主机上短时间内大量分配内存事件。突发性内存分配可能引发直接回收或者 oom 等&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;iotracing&lt;/td&gt;&#xA;          &lt;td&gt;检测宿主磁盘 IO 延迟异常。输出访问的文件名和路径、磁盘设备、inode 号、容器等上下文信息&lt;/td&gt;&#xA;          &lt;td&gt;频繁出现磁盘 IO 带宽打满、磁盘访问突增，进而导致应用请求延迟或者系统性能抖动&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;cpusys&#34;&gt;CPUSYS&lt;/h3&gt;&#xA;&lt;p&gt;系统态 CPU 时间反映内核执行开销，包括系统调用、中断处理、内核线程调度、内存管理及锁竞争等操作。该指标异常升高，通常表明存在内核级性能瓶颈：高频系统调用、硬件设备异常、锁争用或内存回收压力（kswapd 直接回收）等。&lt;/p&gt;&#xA;&lt;p&gt;cpusys 检测到该指标异常时，自动会触发抓取系统的调用栈并生成火焰图，帮助定位问题根因。 既考虑到系统 cpu sys 达到阈值，或者sys 突发毛刺带来的问题，其中触发条件如下：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU Sys 使用率 &amp;gt; 阈值 A&lt;/li&gt;&#xA;&lt;li&gt;CPU Sys 使用率单位时间内增长 &amp;gt; 阈值 B&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;cpuidle&#34;&gt;CPUIDLE&lt;/h3&gt;&#xA;&lt;p&gt;K8S 容器环境，CPU idle 时间（即 CPU 处于空闲状态的时间比例）的突然下降通常表明容器内进程正在过度消耗 CPU 资源，可能引发业务延迟、调度争抢甚至整体系统性能下降。&lt;/p&gt;</description>
    </item>
    <item>
      <title>统计指标</title>
      <link>https://huatuo.tech/docs/metrics/</link>
      <pubDate>Wed, 11 Jun 2025 04:38:33 -0400</pubDate>
      <guid>https://huatuo.tech/docs/metrics/</guid>
      <description>&lt;p&gt;该文档汇总了当前 v1.0 版本支持的所有的指标，涉及CPU，内存，网络，IO。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;子系统&lt;/th&gt;&#xA;          &lt;th&gt;指标&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;          &lt;th&gt;单位&lt;/th&gt;&#xA;          &lt;th&gt;统计纬度&lt;/th&gt;&#xA;          &lt;th&gt;指标来源&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_util_sys&lt;/td&gt;&#xA;          &lt;td&gt;cpu 系统态利用率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;基于 cgroup cpuacct.stat 和 cpuacct.usage 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_util_usr&lt;/td&gt;&#xA;          &lt;td&gt;cpu 用户态利用率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;基于 cgroup cpuacct.stat 和 cpuacct.usage 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_util_total&lt;/td&gt;&#xA;          &lt;td&gt;容器 cpu 总利用率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;基于 cgroup cpuacct.stat 和 cpuacct.usage 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_util_container_sys&lt;/td&gt;&#xA;          &lt;td&gt;容器 cpu 系统态利用率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cgroup cpuacct.stat 和 cpuacct.usage 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_util_container_usr&lt;/td&gt;&#xA;          &lt;td&gt;容器 cpu 用户态利用率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cgroup cpuacct.stat 和 cpuacct.usage 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_util_container_total&lt;/td&gt;&#xA;          &lt;td&gt;容器 cpu 总利用率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cgroup cpuacct.stat 和 cpuacct.usage 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_burst_time&lt;/td&gt;&#xA;          &lt;td&gt;累计墙时（以纳秒为单位），周期内突发超出配额的时间&lt;/td&gt;&#xA;          &lt;td&gt;纳秒(ns)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_nr_bursts&lt;/td&gt;&#xA;          &lt;td&gt;周期内突发次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_nr_throttled&lt;/td&gt;&#xA;          &lt;td&gt;cgroup 被 throttled/limited 的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_exter_wait_rate&lt;/td&gt;&#xA;          &lt;td&gt;容器外进程导致的等待率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取的 throttled_time hierarchy_wait_sum inner_wait_sum 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_inner_wait_rate&lt;/td&gt;&#xA;          &lt;td&gt;容器内部进程导致的等待率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取的 throttled_time hierarchy_wait_sum inner_wait_sum 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_throttle_wait_rate&lt;/td&gt;&#xA;          &lt;td&gt;容器被限制而引起的等待率&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取的 throttled_time hierarchy_wait_sum inner_wait_sum 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;cpu_stat_container_wait_rate&lt;/td&gt;&#xA;          &lt;td&gt;总的等待率: exter_wait_rate + inner_wait_rate + throttle_wait_rate&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;基于 cpu.stat 读取的 throttled_time hierarchy_wait_sum inner_wait_sum 计算&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;loadavg_container_container_nr_running&lt;/td&gt;&#xA;          &lt;td&gt;容器中运行的任务数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;从内核通过 netlink 获取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;loadavg_container_container_nr_uninterruptible&lt;/td&gt;&#xA;          &lt;td&gt;容器中不可中断任务的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;从内核通过 netlink 获取&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;loadavg_load1&lt;/td&gt;&#xA;          &lt;td&gt;系统过去 1 分钟的平均负载&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;loadavg_load5&lt;/td&gt;&#xA;          &lt;td&gt;系统过去 5 分钟的平均负载&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;loadavg_load15&lt;/td&gt;&#xA;          &lt;td&gt;系统过去 15 分钟的平均负载&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;softirq_latency&lt;/td&gt;&#xA;          &lt;td&gt;在不同时间域发生的 NET_RX/NET_TX 中断延迟次数：&lt;br&gt;0~10 us&lt;br&gt;100us ~ 1ms&lt;br&gt;10us ~ 100us&lt;br&gt;1ms ~ inf&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;BPF 软中断埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_container_nlat_01&lt;/td&gt;&#xA;          &lt;td&gt;容器中进程调度延迟在 0~10 毫秒内的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_container_nlat_02&lt;/td&gt;&#xA;          &lt;td&gt;容器中进程调度延迟在 10~20 毫秒之间的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_container_nlat_03&lt;/td&gt;&#xA;          &lt;td&gt;容器中进程调度延迟在 20~50 毫秒之间的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_container_nlat_04&lt;/td&gt;&#xA;          &lt;td&gt;容器中进程调度延迟超过 50 毫秒的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_g_nlat_01&lt;/td&gt;&#xA;          &lt;td&gt;宿主中进程调度延迟在范围内 0～10 毫秒的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_g_nlat_02&lt;/td&gt;&#xA;          &lt;td&gt;宿主中进程调度延迟在范围内 10～20 毫秒的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_g_nlat_03&lt;/td&gt;&#xA;          &lt;td&gt;宿主中进程调度延迟在范围内 20～50 毫秒的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;runqlat_g_nlat_04&lt;/td&gt;&#xA;          &lt;td&gt;宿主中进程调度延迟超过 50 毫秒的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度切换埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;cpu&lt;/td&gt;&#xA;          &lt;td&gt;reschedipi_oversell_probability&lt;/td&gt;&#xA;          &lt;td&gt;vm 中 cpu 超卖检测&lt;/td&gt;&#xA;          &lt;td&gt;0-1&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 调度 ipi 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;buddyinfo_blocks&lt;/td&gt;&#xA;          &lt;td&gt;内核伙伴系统内存分配&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_events_container_watermark_inc&lt;/td&gt;&#xA;          &lt;td&gt;内存水位计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.events&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_events_container_watermark_dec&lt;/td&gt;&#xA;          &lt;td&gt;内存水位计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.events&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_others_container_local_direct_reclaim_time&lt;/td&gt;&#xA;          &lt;td&gt;cgroup 中页分配速度&lt;/td&gt;&#xA;          &lt;td&gt;纳秒(ns)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.local_direct_reclaim_time&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_others_container_directstall_time&lt;/td&gt;&#xA;          &lt;td&gt;直接回收时间&lt;/td&gt;&#xA;          &lt;td&gt;纳秒(ns)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.directstall_stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_others_container_asyncreclaim_time&lt;/td&gt;&#xA;          &lt;td&gt;异步回收时间&lt;/td&gt;&#xA;          &lt;td&gt;纳秒(ns)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.asynreclaim_stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_writeback&lt;/td&gt;&#xA;          &lt;td&gt;匿名/文件 cache sync 到磁盘排队字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_unevictable&lt;/td&gt;&#xA;          &lt;td&gt;无法回收的内存（如 mlocked）&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_shmem&lt;/td&gt;&#xA;          &lt;td&gt;共享内存字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgsteal_kswapd&lt;/td&gt;&#xA;          &lt;td&gt;kswapd 和 cswapd 回收的内存字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgsteal_globalkswapd&lt;/td&gt;&#xA;          &lt;td&gt;由 kswapd 回收的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgsteal_globaldirect&lt;/td&gt;&#xA;          &lt;td&gt;过页面分配直接回收的内存字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgsteal_direct&lt;/td&gt;&#xA;          &lt;td&gt;页分配和 try_charge 期间直接回收的内存字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgsteal_cswapd&lt;/td&gt;&#xA;          &lt;td&gt;由 cswapd 回收的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgscan_kswapd&lt;/td&gt;&#xA;          &lt;td&gt;kswapd 和 cswapd 扫描的内存字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgscan_globalkswapd&lt;/td&gt;&#xA;          &lt;td&gt;kswapd 扫描的内存字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgscan_globaldirect&lt;/td&gt;&#xA;          &lt;td&gt;扫描内存中通过直接回收在页面分配期间的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgscan_direct&lt;/td&gt;&#xA;          &lt;td&gt;扫描内存的字节数，在页面分配和 try_charge 期间通过直接回收的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgscan_cswapd&lt;/td&gt;&#xA;          &lt;td&gt;由 cswapd 扫描内存的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgrefill&lt;/td&gt;&#xA;          &lt;td&gt;内存中扫描的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_pgdeactivate&lt;/td&gt;&#xA;          &lt;td&gt;内存中未激活的部分被添加到非活动列表中&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_inactive_file&lt;/td&gt;&#xA;          &lt;td&gt;文件内存中不活跃的 LRU 列表的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_inactive_anon&lt;/td&gt;&#xA;          &lt;td&gt;匿名和交换缓存内存中不活跃的 LRU 列表的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_dirty&lt;/td&gt;&#xA;          &lt;td&gt;等待写入磁盘的字节&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_active_file&lt;/td&gt;&#xA;          &lt;td&gt;活跃内存中文件内存的大小&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_stat_container_active_anon&lt;/td&gt;&#xA;          &lt;td&gt;活跃内存中匿名和交换内存的大小&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;memory.stat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;mountpoint_perm_ro&lt;/td&gt;&#xA;          &lt;td&gt;挂在点是否为只读&lt;/td&gt;&#xA;          &lt;td&gt;布尔(bool)&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_allocstall_normal&lt;/td&gt;&#xA;          &lt;td&gt;宿主在 normal 域直接回收&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_allocstall_movable&lt;/td&gt;&#xA;          &lt;td&gt;宿主在 movable 域直接回收&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_compact_stall&lt;/td&gt;&#xA;          &lt;td&gt;内存压缩计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_active_anon&lt;/td&gt;&#xA;          &lt;td&gt;活跃的匿名页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_active_file&lt;/td&gt;&#xA;          &lt;td&gt;活跃的文件页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_boost_pages&lt;/td&gt;&#xA;          &lt;td&gt;kswapd boosting 页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_dirty&lt;/td&gt;&#xA;          &lt;td&gt;脏页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_free_pages&lt;/td&gt;&#xA;          &lt;td&gt;释放的页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_inactive_anon&lt;/td&gt;&#xA;          &lt;td&gt;非活跃的匿名页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_inactive_file&lt;/td&gt;&#xA;          &lt;td&gt;非活跃的文件页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_kswapd_boost&lt;/td&gt;&#xA;          &lt;td&gt;kswapd boosting 次数计数&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_mlock&lt;/td&gt;&#xA;          &lt;td&gt;锁定的页面数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_shmem&lt;/td&gt;&#xA;          &lt;td&gt;共享内存页面数&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_slab_reclaimable&lt;/td&gt;&#xA;          &lt;td&gt;可回收的 slab 页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_slab_unreclaimable&lt;/td&gt;&#xA;          &lt;td&gt;无法回收的 slab 页数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_unevictable&lt;/td&gt;&#xA;          &lt;td&gt;不可驱逐页面数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_nr_writeback&lt;/td&gt;&#xA;          &lt;td&gt;写入页面数&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_numa_pages_migrated&lt;/td&gt;&#xA;          &lt;td&gt;NUMA 迁移中的页面数&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_pgdeactivate&lt;/td&gt;&#xA;          &lt;td&gt;页数被停用进入非活动 LRU&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_pgrefill&lt;/td&gt;&#xA;          &lt;td&gt;扫描的活跃 LRU 页面数&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_pgscan_direct&lt;/td&gt;&#xA;          &lt;td&gt;扫描的页数&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_pgscan_kswapd&lt;/td&gt;&#xA;          &lt;td&gt;扫描的页面数量，由 kswapd 回收的数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_pgsteal_direct&lt;/td&gt;&#xA;          &lt;td&gt;直接回收的页面&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;vmstat_pgsteal_kswapd&lt;/td&gt;&#xA;          &lt;td&gt;被 kswapd 回收的数量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;/proc/vmstat&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;hungtask_counter&lt;/td&gt;&#xA;          &lt;td&gt;hungtask 事件计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;BPF 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;oom_host_counter&lt;/td&gt;&#xA;          &lt;td&gt;oom 事件计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;BPF 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;oom_container_counter&lt;/td&gt;&#xA;          &lt;td&gt;oom 事件计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;BPF 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;softlockup_counter&lt;/td&gt;&#xA;          &lt;td&gt;softlockup 事件计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;BPF 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_free_compaction&lt;/td&gt;&#xA;          &lt;td&gt;内存压缩的速度&lt;/td&gt;&#xA;          &lt;td&gt;纳秒(ns)&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_free_allocstall&lt;/td&gt;&#xA;          &lt;td&gt;内存中主机直接回收速度&lt;/td&gt;&#xA;          &lt;td&gt;纳秒(ns)&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;memory&lt;/td&gt;&#xA;          &lt;td&gt;memory_cgroup_container_directstall&lt;/td&gt;&#xA;          &lt;td&gt;cgroup 尝试直接回收的计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_disk_d2c&lt;/td&gt;&#xA;          &lt;td&gt;磁盘访问时的 io 延迟统计，包括驱动程序和硬件组件消耗的时间&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_disk_q2c&lt;/td&gt;&#xA;          &lt;td&gt;磁盘访问整个 I/O 生命周期时的 I/O 延迟统计&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_container_d2c&lt;/td&gt;&#xA;          &lt;td&gt;磁盘访问时的 I/O 延迟统计，包括驱动程序和硬件组件消耗的时间&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_container_q2c&lt;/td&gt;&#xA;          &lt;td&gt;磁盘访问整个 I/O 生命周期时的 I/O 延迟统计&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_disk_flush&lt;/td&gt;&#xA;          &lt;td&gt;磁盘 RAID 设备刷新操作延迟统计&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_container_flush&lt;/td&gt;&#xA;          &lt;td&gt;磁盘 RAID 设备上由容器引起的刷新操作延迟统计&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;容器&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;IO&lt;/td&gt;&#xA;          &lt;td&gt;iolatency_disk_freeze&lt;/td&gt;&#xA;          &lt;td&gt;磁盘 freese 事件&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;bpf 埋点统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;tcp_mem_limit_pages&lt;/td&gt;&#xA;          &lt;td&gt;系统 TCP 总内存大小限制&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;tcp_mem_usage_bytes&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 TCP 内存总字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;tcp_mem_usage_pages * page_size&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;tcp_mem_usage_pages&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 TCP 内存总量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;tcp_mem_usage_percent&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 TCP 内存百分比（相对 TCP 内存总限制）&lt;/td&gt;&#xA;          &lt;td&gt;%&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;tcp_mem_usage_pages / tcp_mem_limit_pages&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;arp_entries&lt;/td&gt;&#xA;          &lt;td&gt;arp 缓存条目数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;arp_total&lt;/td&gt;&#xA;          &lt;td&gt;总 arp 缓存条目数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_backlog&lt;/td&gt;&#xA;          &lt;td&gt;待发送的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_bytes_total&lt;/td&gt;&#xA;          &lt;td&gt;已发送的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_current_queue_length&lt;/td&gt;&#xA;          &lt;td&gt;排队等待发送的包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_drops_total&lt;/td&gt;&#xA;          &lt;td&gt;丢弃的数据包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_overlimits_total&lt;/td&gt;&#xA;          &lt;td&gt;排队数据包里超限的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_packets_total&lt;/td&gt;&#xA;          &lt;td&gt;已发送的包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;qdisc_requeues_total&lt;/td&gt;&#xA;          &lt;td&gt;重新入队的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;netlink qdisc 统计&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;ethtool_hardware_rx_dropped_errors&lt;/td&gt;&#xA;          &lt;td&gt;接口接收丢包统计&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主&lt;/td&gt;&#xA;          &lt;td&gt;硬件驱动相关, 如 mlx, ixgbe, bnxt_en, etc.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_bytes_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_compressed_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收的压缩包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_dropped_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收丢弃的包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_errors_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收检测到错误的包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_fifo_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收 fifo 缓冲区错误数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_frame_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收帧对齐错误&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_multicast_total&lt;/td&gt;&#xA;          &lt;td&gt;多播数据包已接收的包数量，对于硬件接口，此统计通常在设备层计算（与 rx_packets 不同），因此可能包括未到达的数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_receive_packets_total&lt;/td&gt;&#xA;          &lt;td&gt;接口接收到的有效数据包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_bytes_total&lt;/td&gt;&#xA;          &lt;td&gt;接口发送的字节数&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_carrier_total&lt;/td&gt;&#xA;          &lt;td&gt;接口发送过程中由于载波丢失导致的帧传输错误数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_colls_total&lt;/td&gt;&#xA;          &lt;td&gt;接口发送碰撞计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_compressed_total&lt;/td&gt;&#xA;          &lt;td&gt;接口发送压缩数据包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_dropped_total&lt;/td&gt;&#xA;          &lt;td&gt;数据包在传输过程中丢失的数量，如资源不足&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_errors_total&lt;/td&gt;&#xA;          &lt;td&gt;发送错误计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_fifo_total&lt;/td&gt;&#xA;          &lt;td&gt;帧传输错误数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netdev_transmit_packets_total&lt;/td&gt;&#xA;          &lt;td&gt;发送数据包计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_ArpFilter&lt;/td&gt;&#xA;          &lt;td&gt;因 ARP 过滤规则而被拒绝的 ARP 请求/响应包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_BusyPollRxPackets&lt;/td&gt;&#xA;          &lt;td&gt;通过 busy polling​​ 机制接收到的网络数据包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_DelayedACKLocked&lt;/td&gt;&#xA;          &lt;td&gt;由于用户态锁住了sock，而无法发送delayed ack的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_DelayedACKLost&lt;/td&gt;&#xA;          &lt;td&gt;当收到已确认的包时，它将被更新。延迟 ACK 丢失可能会引起这个问题，但其他原因也可能触发，例如网络中重复的包。&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_DelayedACKs&lt;/td&gt;&#xA;          &lt;td&gt;延迟的 ACK 定时器已过期。TCP 堆栈将发送一个纯 ACK 数据包并退出延迟 ACK 模式&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_EmbryonicRsts&lt;/td&gt;&#xA;          &lt;td&gt;收到初始 SYN_RECV 套接字的重置&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_IPReversePathFilter&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_ListenDrops&lt;/td&gt;&#xA;          &lt;td&gt;当内核收到客户端的 SYN 请求时，如果 TCP 接受队列已满，内核将丢弃 SYN 并将 TcpExtListenOverflows 加 1。同时，内核也会将 TcpExtListenDrops 加 1。当一个 TCP 套接字处于监听状态，且内核需要丢弃一个数据包时，内核会始终将 TcpExtListenDrops 加 1。因此，增加 TcpExtListenOverflows 会导致 TcpExtListenDrops 同时增加，但 TcpExtListenDrops 也会在没有 TcpExtListenOverflows 增加的情况下增加，例如内存分配失败也会导致 TcpExtListenDrops 增加。&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_ListenOverflows&lt;/td&gt;&#xA;          &lt;td&gt;当内核收到客户端的 SYN 请求时，如果 TCP 接受队列已满，内核将丢弃 SYN 并将 TcpExtListenOverflows 加 1。同时，内核也会将 TcpExtListenDrops 加 1。当一个 TCP 套接字处于监听状态，且内核需要丢弃一个数据包时，内核会始终将 TcpExtListenDrops 加 1。因此，增加 TcpExtListenOverflows 会导致 TcpExtListenDrops 同时增加，但 TcpExtListenDrops 也会在没有 TcpExtListenOverflows 增加的情况下增加，例如内存分配失败也会导致 TcpExtListenDrops 增加。&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_LockDroppedIcmps&lt;/td&gt;&#xA;          &lt;td&gt;由于套接字被锁定，ICMP 数据包被丢弃&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_OfoPruned&lt;/td&gt;&#xA;          &lt;td&gt;协议栈尝试在乱序队列中丢弃数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_OutOfWindowIcmps&lt;/td&gt;&#xA;          &lt;td&gt;ICMP 数据包因超出窗口而被丢弃&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_PAWSActive&lt;/td&gt;&#xA;          &lt;td&gt;数据包在 Syn-Sent 状态被 PAWS 丢弃&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_PAWSEstab&lt;/td&gt;&#xA;          &lt;td&gt;数据包在除 Syn-Sent 之外的所有状态下都会被 PAWS 丢弃&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_PFMemallocDrop&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_PruneCalled&lt;/td&gt;&#xA;          &lt;td&gt;协议栈尝试回收套接字内存。更新此计数器后，将尝试合并乱序队列和接收队列。如果内存仍然不足，将尝试丢弃乱序队列中的数据包（并更新 TcpExtOfoPruned 计数器）。&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_RcvPruned&lt;/td&gt;&#xA;          &lt;td&gt;在从顺序错误的队列中‘collapse’和丢弃数据包后，如果实际使用的内存仍然大于最大允许内存，则此计数器将被更新。这意味着‘prune’失败&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_SyncookiesFailed&lt;/td&gt;&#xA;          &lt;td&gt;MSS 从 SYN cookie 解码出来的无效。当这个计数器更新时，接收到的数据包不会被当作 SYN cookie 处理，并且 TcpExtSyncookiesRecv 计数器不会更新&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_SyncookiesRecv&lt;/td&gt;&#xA;          &lt;td&gt;接收了多少个 SYN cookies 的回复数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_SyncookiesSent&lt;/td&gt;&#xA;          &lt;td&gt;发送了多少个 SYN cookies&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPACKSkippedChallenge&lt;/td&gt;&#xA;          &lt;td&gt;ACK 为 challenge ACK 时，将跳过 ACK&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPACKSkippedFinWait2&lt;/td&gt;&#xA;          &lt;td&gt;ACK 在 Fin-Wait-2 状态被跳过，原因可能是 PAWS 检查失败或接收到的序列号超出窗口&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPACKSkippedPAWS&lt;/td&gt;&#xA;          &lt;td&gt;由于 PAWS（保护包装序列号）检查失败，ACK 被跳过&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPACKSkippedSeq&lt;/td&gt;&#xA;          &lt;td&gt;序列号超出窗口范围，时间戳通过 PAWS 检查，TCP 状态不是 Syn-Recv、Fin-Wait-2 和 Time-Wait&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPACKSkippedSynRecv&lt;/td&gt;&#xA;          &lt;td&gt;ACK 在 Syn-Recv 状态中被跳过。Syn-Recv 状态表示协议栈收到一个 SYN 并回复 SYN+ACK&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPACKSkippedTimeWait&lt;/td&gt;&#xA;          &lt;td&gt;CK 在 Time-Wait 状态中被跳过，原因可能是 PAWS 检查失败或接收到的序列号超出窗口&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAbortFailed&lt;/td&gt;&#xA;          &lt;td&gt;内核 TCP 层将在满足 RFC2525 2.17 节时发送 RST。如果在处理过程中发生内部错误，TcpExtTCPAbortFailed 将增加&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAbortOnClose&lt;/td&gt;&#xA;          &lt;td&gt;用户模式程序缓冲区中有数据时关闭的套接字数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAbortOnData&lt;/td&gt;&#xA;          &lt;td&gt;TCP 层有正在传输的数据，但需要关闭连接&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAbortOnLinger&lt;/td&gt;&#xA;          &lt;td&gt;当 TCP 连接进入 FIN_WAIT_2 状态时，内核不会等待来自另一侧的 fin 包，而是发送 RST 并立即删除套接字&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAbortOnMemory&lt;/td&gt;&#xA;          &lt;td&gt;当一个应用程序关闭 TCP 连接时，内核仍然需要跟踪该连接，让它完成 TCP 断开过程&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAbortOnTimeout&lt;/td&gt;&#xA;          &lt;td&gt;此计数器将在任何 TCP 计时器到期时增加。在这种情况下，内核不会发送 RST，而是放弃连接&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAckCompressed&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPAutoCorking&lt;/td&gt;&#xA;          &lt;td&gt;发送数据包时，TCP 层会尝试将小数据包合并成更大的一个&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPBacklogDrop&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPChallengeACK&lt;/td&gt;&#xA;          &lt;td&gt;challenge ack 发送的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKIgnoredNoUndo&lt;/td&gt;&#xA;          &lt;td&gt;当 DSACK 块无效时，这两个计数器中的一个将被更新。哪个计数器将被更新取决于 TCP 套接字的 undo_marker 标志&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKIgnoredOld&lt;/td&gt;&#xA;          &lt;td&gt;当 DSACK 块无效时，这两个计数器中的一个将被更新。哪个计数器将被更新取决于 TCP 套接字的 undo_marker 标志&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKOfoRecv&lt;/td&gt;&#xA;          &lt;td&gt;收到一个 DSACK，表示收到一个顺序错误的重复数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKOfoSent&lt;/td&gt;&#xA;          &lt;td&gt;收到一个乱序的重复数据包，因此向发送者发送 DSACK&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKOldSent&lt;/td&gt;&#xA;          &lt;td&gt;收到一个已确认的重复数据包，因此向发送者发送 DSACK&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKRecv&lt;/td&gt;&#xA;          &lt;td&gt;收到一个 DSACK，表示收到了一个已确认的重复数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDSACKUndo&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDeferAcceptDrop&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDelivered&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPDeliveredCE&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenActive&lt;/td&gt;&#xA;          &lt;td&gt;当 TCP 栈在 SYN-SENT 状态接收到一个 ACK 包，并且 ACK 包确认了 SYN 包中的数据，理解 TFO cookie 已被对方接受，然后它更新这个计数器&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenActiveFail&lt;/td&gt;&#xA;          &lt;td&gt;Fast Open 失败&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenBlackhole&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenCookieReqd&lt;/td&gt;&#xA;          &lt;td&gt;客户端想要请求 TFO cookie 的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenListenOverflow&lt;/td&gt;&#xA;          &lt;td&gt;挂起的 Fast Open 请求数量大于 fastopenq-&amp;gt;max_qlen 时，协议栈将拒绝 Fast Open 请求并更新此计数器&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenPassive&lt;/td&gt;&#xA;          &lt;td&gt;指示 TCP 堆栈接受 Fast Open 请求的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastOpenPassiveFail&lt;/td&gt;&#xA;          &lt;td&gt;协议栈拒绝 Fast Open 的次数，这是由于 TFO cookie 无效或 在创建套接字过程中发现错误所引起的&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFastRetrans&lt;/td&gt;&#xA;          &lt;td&gt;快速重传&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFromZeroWindowAdv&lt;/td&gt;&#xA;          &lt;td&gt;TCP 接收窗口设置为非零值&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPFullUndo&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPHPAcks&lt;/td&gt;&#xA;          &lt;td&gt;如果数据包设置了 ACK 标志且没有数据，则是一个纯 ACK 数据包，如果内核在快速路径中处理它，TcpExtTCPHPAcks 将增加 1&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPHPHits&lt;/td&gt;&#xA;          &lt;td&gt;如果 TCP 数据包包含数据（这意味着它不是一个纯 ACK 数据包），并且此数据包在快速路径中处理，TcpExtTCPHPHits 将增加 1&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPHystartDelayCwnd&lt;/td&gt;&#xA;          &lt;td&gt;CWND 检测到的包延迟总和。将此值除以 TcpExtTCPHystartDelayDetect，即为通过包延迟检测到的平均 CWND&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPHystartDelayDetect&lt;/td&gt;&#xA;          &lt;td&gt;检测到数据包延迟阈值次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPHystartTrainCwnd&lt;/td&gt;&#xA;          &lt;td&gt;TCP Hystart 训练中使用的拥塞窗口大小，将此值除以 TcpExtTCPHystartTrainDetect 得到由 ACK 训练长度检测到的平均 CWND&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPHystartTrainDetect&lt;/td&gt;&#xA;          &lt;td&gt;TCP Hystart 训练检测的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPKeepAlive&lt;/td&gt;&#xA;          &lt;td&gt;此计数器指示已发送的保活数据包。默认情况下不会启用保活功能。用户空间程序可以通过设置 SO_KEEPALIVE 套接字选项来启用它。&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPLossFailures&lt;/td&gt;&#xA;          &lt;td&gt;丢失数据包而进行恢复失败的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPLossProbeRecovery&lt;/td&gt;&#xA;          &lt;td&gt;检测到丢失的数据包恢复的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPLossProbes&lt;/td&gt;&#xA;          &lt;td&gt;TCP 检测到丢失的数据包数量，通常用于检测网络拥塞或丢包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPLossUndo&lt;/td&gt;&#xA;          &lt;td&gt;TCP重传数据包成功到达目标端口，但之前已经由于超时或拥塞丢失，因此被视为“撤销”丢失的数据包数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPLostRetransmit&lt;/td&gt;&#xA;          &lt;td&gt;丢包重传个数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMD5Failure&lt;/td&gt;&#xA;          &lt;td&gt;校验错误&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMD5NotFound&lt;/td&gt;&#xA;          &lt;td&gt;校验错误&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMD5Unexpected&lt;/td&gt;&#xA;          &lt;td&gt;校验错误&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMTUPFail&lt;/td&gt;&#xA;          &lt;td&gt;使用 DSACK 无需慢启动即可恢复拥塞窗口&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMTUPSuccess&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMemoryPressures&lt;/td&gt;&#xA;          &lt;td&gt;到达 tcp 内存压力位 low 的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMemoryPressuresChrono&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPMinTTLDrop&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPOFODrop&lt;/td&gt;&#xA;          &lt;td&gt;TCP 层接收到一个乱序的数据包，但内存不足，因此丢弃它。此类数据包不会计入 TcpExtTCPOFOQueue 计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPOFOMerge&lt;/td&gt;&#xA;          &lt;td&gt;接收到的顺序错误的包与上一个包有重叠。重叠部分将被丢弃。所有 TcpExtTCPOFOMerge 包也将计入 TcpExtTCPOFOQueue&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPOFOQueue&lt;/td&gt;&#xA;          &lt;td&gt;TCP 层接收到一个乱序的数据包，并且有足够的内存来排队它&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPOrigDataSent&lt;/td&gt;&#xA;          &lt;td&gt;发送原始数据（不包括重传但包括 SYN 中的数据）的包数量。此计数器与 TcpOutSegs 不同，因为 TcpOutSegs 还跟踪纯 ACK。TCPOrigDataSent 更有助于跟踪 TCP 重传率&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPPartialUndo&lt;/td&gt;&#xA;          &lt;td&gt;检测到一些错误的重传，在我们快速重传的同时，收到了部分确认，因此能够部分撤销我们的一些 CWND 减少&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPPureAcks&lt;/td&gt;&#xA;          &lt;td&gt;如果数据包设置了 ACK 标志且没有数据，则是一个纯 ACK 数据包，如果内核在快速路径中处理它，TcpExtTCPHPAcks 将增加 1，如果内核在慢速路径中处理它，TcpExtTCPPureAcks 将增加 1&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRcvCoalesce&lt;/td&gt;&#xA;          &lt;td&gt;当数据包被 TCP 层接收但未被应用程序读取时，TCP 层会尝试合并它们。这个计数器表示在这种情况下合并了多少个数据包。如果启用了 GRO，GRO 会合并大量数据包，这些数据包不会被计算到 TcpExtTCPRcvCoalesce 中&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRcvCollapsed&lt;/td&gt;&#xA;          &lt;td&gt;在“崩溃”过程中释放了多少个 skbs&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRenoFailures&lt;/td&gt;&#xA;          &lt;td&gt;TCP_CA_Disorder 阶段进入并经历 RTO 的重传失败次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRenoRecovery&lt;/td&gt;&#xA;          &lt;td&gt;当拥塞控制进入恢复状态时，如果使用 sack，TcpExtTCPSackRecovery 增加 1，如果不使用 sack，TcpExtTCPRenoRecovery 增加 1。这两个计数器意味着协议栈开始重传丢失的数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRenoRecoveryFail&lt;/td&gt;&#xA;          &lt;td&gt;进入恢复阶段并 RTO 的连接数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRenoReorder&lt;/td&gt;&#xA;          &lt;td&gt;重排序数据包被快速恢复检测到。只有在 SACK 被禁用时才会使用&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPReqQFullDoCookies&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPReqQFullDrop&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPRetransFail&lt;/td&gt;&#xA;          &lt;td&gt;尝试将重传数据包发送到下层，但下层返回错误&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSACKDiscard&lt;/td&gt;&#xA;          &lt;td&gt;有多少个 SACK 块无效。如果无效的 SACK 块是由 ACK 记录引起的，tcp 栈只会忽略它，而不会更新此计数器&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSACKReneging&lt;/td&gt;&#xA;          &lt;td&gt;一个数据包被 SACK 确认，但接收方已丢弃此数据包，因此发送方需要重传此数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSACKReorder&lt;/td&gt;&#xA;          &lt;td&gt;SACK 检测到的重排序数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSYNChallenge&lt;/td&gt;&#xA;          &lt;td&gt;响应 SYN 数据包发送的 Challenge ack 数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSackFailures&lt;/td&gt;&#xA;          &lt;td&gt;TCP_CA_Disorder 阶段进入并经历 RTO 的重传失败次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSackMerged&lt;/td&gt;&#xA;          &lt;td&gt;skb 已合并计数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSackRecovery&lt;/td&gt;&#xA;          &lt;td&gt;当拥塞控制进入恢复状态时，如果使用 sack，TcpExtTCPSackRecovery 增加 1，如果不使用 sack，TcpExtTCPRenoRecovery 增加 1。这两个计数器意味着 TCP 栈开始重传丢失的数据包&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSackRecoveryFail&lt;/td&gt;&#xA;          &lt;td&gt;SACK 恢复失败的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSackShiftFallback&lt;/td&gt;&#xA;          &lt;td&gt;skb 应该被移动或合并，但由于某些原因，TCP 堆栈没有这样做&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSackShifted&lt;/td&gt;&#xA;          &lt;td&gt;skb 被移位&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSlowStartRetrans&lt;/td&gt;&#xA;          &lt;td&gt;重新传输一个数据包，拥塞控制状态为“丢失”&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSpuriousRTOs&lt;/td&gt;&#xA;          &lt;td&gt;虚假重传超时&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSpuriousRtxHostQueues&lt;/td&gt;&#xA;          &lt;td&gt;当 TCP 栈想要重传一个数据包，发现该数据包并未在网络中丢失，但数据包尚未发送，TCP 栈将放弃重传并更新此计数器。这可能会发生在数据包在 qdisc 或驱动程序队列中停留时间过长的情况下&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPSynRetrans&lt;/td&gt;&#xA;          &lt;td&gt;SYN 和 SYN/ACK 重传次数，将重传分解为 SYN、快速重传、超时重传等&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPTSReorder&lt;/td&gt;&#xA;          &lt;td&gt;tcp 栈在接收到时间截包而进行乱序包阀值调整的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPTimeWaitOverflow&lt;/td&gt;&#xA;          &lt;td&gt;TIME_WAIT 状态的套接字因超出限制而无法分配的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPTimeouts&lt;/td&gt;&#xA;          &lt;td&gt;TCP 超时事件&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPToZeroWindowAdv&lt;/td&gt;&#xA;          &lt;td&gt;TCP 接收窗口从非零值设置为零&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPWantZeroWindowAdv&lt;/td&gt;&#xA;          &lt;td&gt;根据当前内存使用情况，TCP 栈尝试将接收窗口设置为零。但接收窗口可能仍然是一个非零值&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPWinProbe&lt;/td&gt;&#xA;          &lt;td&gt;定期发送的 ACK 数据包数量，以确保打开窗口的反向 ACK 数据包没有丢失&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TCPWqueueTooBig&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TW&lt;/td&gt;&#xA;          &lt;td&gt;TCP 套接字在快速计时器中完成 time wait 状态&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TWKilled&lt;/td&gt;&#xA;          &lt;td&gt;TCP 套接字在慢速计时器中完成 time wait 状态&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_TcpExt_TWRecycled&lt;/td&gt;&#xA;          &lt;td&gt;等待套接字通过时间戳回收&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_ActiveOpens&lt;/td&gt;&#xA;          &lt;td&gt;TCP 层发送一个 SYN，进入 SYN-SENT 状态。每当 TcpActiveOpens 增加 1 时，TcpOutSegs 应该始终增加 1&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_AttemptFails&lt;/td&gt;&#xA;          &lt;td&gt;TCP 连接从 SYN-SENT 状态或 SYN-RCVD 状态直接过渡到 CLOSED 状态次数，加上 TCP 连接从 SYN-RCVD 状态直接过渡到 LISTEN 状态次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_CurrEstab&lt;/td&gt;&#xA;          &lt;td&gt;TCP 连接数，当前状态为 ESTABLISHED 或 CLOSE-WAIT&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_EstabResets&lt;/td&gt;&#xA;          &lt;td&gt;TCP 连接从 ESTABLISHED 状态或 CLOSE-WAIT 状态直接过渡到 CLOSED 状态次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_InCsumErrors&lt;/td&gt;&#xA;          &lt;td&gt;TCP 校验和错误&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_InErrs&lt;/td&gt;&#xA;          &lt;td&gt;错误接收到的段总数（例如，错误的 TCP 校验和）&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_InSegs&lt;/td&gt;&#xA;          &lt;td&gt;TCP 层接收到的数据包数量。如 RFC1213 所述，包括接收到的错误数据包，如校验和错误、无效 TCP 头等&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_MaxConn&lt;/td&gt;&#xA;          &lt;td&gt;可以支持的总 TCP 连接数限制，在最大连接数动态的实体中，此对象应包含值-1&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_OutRsts&lt;/td&gt;&#xA;          &lt;td&gt;TCP 段中包含 RST 标志的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_OutSegs&lt;/td&gt;&#xA;          &lt;td&gt;发送的总段数，包括当前连接上的段，但不包括仅包含重传字节的段&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_PassiveOpens&lt;/td&gt;&#xA;          &lt;td&gt;TCP 连接从监听状态直接过渡到 SYN-RCVD 状态的次数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_RetransSegs&lt;/td&gt;&#xA;          &lt;td&gt;总重传段数 - 即包含一个或多个先前已传输字节的 TCP 段传输的数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_RtoAlgorithm&lt;/td&gt;&#xA;          &lt;td&gt;The algorithm used to determine the timeout value used for retransmitting unacknowledged octets&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_RtoMax&lt;/td&gt;&#xA;          &lt;td&gt;TCP 实现允许的重传超时最大值，以毫秒为单位&lt;/td&gt;&#xA;          &lt;td&gt;毫秒&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;netstat_Tcp_RtoMin&lt;/td&gt;&#xA;          &lt;td&gt;TCP 实现允许的重传超时最小值，以毫秒为单位&lt;/td&gt;&#xA;          &lt;td&gt;毫秒&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_FRAG_inuse&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_FRAG_memory&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_RAW_inuse&lt;/td&gt;&#xA;          &lt;td&gt;使用的 RAW 套接字数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_alloc&lt;/td&gt;&#xA;          &lt;td&gt;TCP 已分配的套接字数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_inuse&lt;/td&gt;&#xA;          &lt;td&gt;已建立的 TCP 套接字数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_mem&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 TCP 内存总量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_mem_bytes&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 TCP 内存总量&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_mem * page_size&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_orphan&lt;/td&gt;&#xA;          &lt;td&gt;TCP 等待关闭的连接数&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_TCP_tw&lt;/td&gt;&#xA;          &lt;td&gt;TCP 套接字终止数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_UDPLITE_inuse&lt;/td&gt;&#xA;          &lt;td&gt;-&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_UDP_inuse&lt;/td&gt;&#xA;          &lt;td&gt;使用的 UDP 套接字数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;宿主，容器&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_UDP_mem&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 UDP 内存总量&lt;/td&gt;&#xA;          &lt;td&gt;页计数&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_UDP_mem_bytes&lt;/td&gt;&#xA;          &lt;td&gt;系统使用的 UDP 内存字节数总和&lt;/td&gt;&#xA;          &lt;td&gt;字节(Bytes)&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_UDP_mem * page_size&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;network&lt;/td&gt;&#xA;          &lt;td&gt;sockstat_sockets_used&lt;/td&gt;&#xA;          &lt;td&gt;系统使用 socket 数量&lt;/td&gt;&#xA;          &lt;td&gt;计数&lt;/td&gt;&#xA;          &lt;td&gt;系统&lt;/td&gt;&#xA;          &lt;td&gt;procfs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
